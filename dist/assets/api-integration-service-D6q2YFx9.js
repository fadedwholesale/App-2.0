var U=Object.defineProperty;var N=(o,r,e)=>r in o?U(o,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):o[r]=e;var S=(o,r,e)=>N(o,typeof r!="symbol"?r+"":r,e);import{R as D}from"./index-Dd0ey9jy.js";const I=o=>{let r;const e=new Set,t=(c,l)=>{const p=typeof c=="function"?c(r):c;if(!Object.is(p,r)){const g=r;r=l??(typeof p!="object"||p===null)?p:Object.assign({},r,p),e.forEach(h=>h(r,g))}},s=()=>r,d={setState:t,getState:s,getInitialState:()=>i,subscribe:c=>(e.add(c),()=>e.delete(c))},i=r=o(t,s,d);return d},R=o=>o?I(o):I,M=o=>o;function q(o,r=M){const e=D.useSyncExternalStore(o.subscribe,D.useCallback(()=>r(o.getState()),[o,r]),D.useCallback(()=>r(o.getInitialState()),[o,r]));return D.useDebugValue(e),e}const P=o=>{const r=R(o),e=t=>q(r,t);return Object.assign(e,r),e},x=o=>o?P(o):P,F=o=>(r,e,t)=>{const s=t.subscribe;return t.subscribe=(n,d,i)=>{let c=n;if(d){const l=(i==null?void 0:i.equalityFn)||Object.is;let p=n(t.getState());c=g=>{const h=n(g);if(!l(p,h)){const C=p;d(p=h,C)}},i!=null&&i.fireImmediately&&d(p,p)}return s(c)},o(r,e,t)},W=F;function $(o,r){let e;try{e=o()}catch{return}return{getItem:s=>{var a;const n=i=>i===null?null:JSON.parse(i,void 0),d=(a=e.getItem(s))!=null?a:null;return d instanceof Promise?d.then(n):n(d)},setItem:(s,a)=>e.setItem(s,JSON.stringify(a,void 0)),removeItem:s=>e.removeItem(s)}}const A=o=>r=>{try{const e=o(r);return e instanceof Promise?e:{then(t){return A(t)(e)},catch(t){return this}}}catch(e){return{then(t){return this},catch(t){return A(t)(e)}}}},H=(o,r)=>(e,t,s)=>{let a={storage:$(()=>localStorage),partialize:m=>m,version:0,merge:(m,w)=>({...w,...m}),...r},n=!1;const d=new Set,i=new Set;let c=a.storage;if(!c)return o((...m)=>{console.warn(`[zustand persist middleware] Unable to update item '${a.name}', the given storage is currently unavailable.`),e(...m)},t,s);const l=()=>{const m=a.partialize({...t()});return c.setItem(a.name,{state:m,version:a.version})},p=s.setState;s.setState=(m,w)=>{p(m,w),l()};const g=o((...m)=>{e(...m),l()},t,s);s.getInitialState=()=>g;let h;const C=()=>{var m,w;if(!c)return;n=!1,d.forEach(f=>{var v;return f((v=t())!=null?v:g)});const b=((w=a.onRehydrateStorage)==null?void 0:w.call(a,(m=t())!=null?m:g))||void 0;return A(c.getItem.bind(c))(a.name).then(f=>{if(f)if(typeof f.version=="number"&&f.version!==a.version){if(a.migrate){const v=a.migrate(f.state,f.version);return v instanceof Promise?v.then(O=>[!0,O]):[!0,v]}console.error("State loaded from storage couldn't be migrated since no migrate function was provided")}else return[!1,f.state];return[!1,void 0]}).then(f=>{var v;const[O,_]=f;if(h=a.merge(_,(v=t())!=null?v:g),e(h,!0),O)return l()}).then(()=>{b==null||b(h,void 0),h=t(),n=!0,i.forEach(f=>f(h))}).catch(f=>{b==null||b(void 0,f)})};return s.persist={setOptions:m=>{a={...a,...m},m.storage&&(c=m.storage)},clearStorage:()=>{c==null||c.removeItem(a.name)},getOptions:()=>a,rehydrate:()=>C(),hasHydrated:()=>n,onHydrate:m=>(d.add(m),()=>{d.delete(m)}),onFinishHydration:m=>(i.add(m),()=>{i.delete(m)})},a.skipHydration||C(),h||g},j=H,u=x()(W(j((o,r)=>({products:[],categories:["All","Flower","Edibles","Concentrates","Pre-Rolls","CBD Products"],selectedCategory:"All",searchTerm:"",filteredProducts:[],customers:[],currentCustomer:null,orders:[],activeOrders:[],completedOrders:[],items:[],total:0,itemCount:0,drivers:[],activeDeliveries:[],deliverySettings:{autoAssign:!0,routeOptimization:!0,priorityEscalation:!0,trackingEnabled:!0},notifications:[],unreadCount:0,settings:{email:!0,push:!0,sms:!1,orderUpdates:!0,promotions:!0},user:null,isAuthenticated:!1,isLoading:!1,currentView:"dashboard",error:null,modals:{productModal:!1,orderModal:!1,customerModal:!1,trackingModal:!1,profileModal:!1},isLiveTrackingEnabled:!1,lastUpdated:Date.now(),connectionStatus:"connected",setProducts:e=>o(t=>{const s=e.filter(a=>(t.selectedCategory==="All"||a.category===t.selectedCategory)&&a.name.toLowerCase().includes(t.searchTerm.toLowerCase()));return{products:e,filteredProducts:s}}),addProduct:e=>o(t=>{const s={...e,id:Math.max(...t.products.map(n=>n.id),0)+1},a=[...t.products,s];return{products:a,filteredProducts:a.filter(n=>(t.selectedCategory==="All"||n.category===t.selectedCategory)&&n.name.toLowerCase().includes(t.searchTerm.toLowerCase()))}}),updateProduct:(e,t)=>o(s=>{const a=s.products.map(n=>n.id===e?{...n,...t}:n);return{products:a,filteredProducts:a.filter(n=>(s.selectedCategory==="All"||n.category===s.selectedCategory)&&n.name.toLowerCase().includes(s.searchTerm.toLowerCase()))}}),deleteProduct:e=>o(t=>{const s=t.products.filter(a=>a.id!==e);return{products:s,filteredProducts:s.filter(a=>(t.selectedCategory==="All"||a.category===t.selectedCategory)&&a.name.toLowerCase().includes(t.searchTerm.toLowerCase()))}}),setSelectedCategory:e=>o(t=>{const s=t.products.filter(a=>(e==="All"||a.category===e)&&a.name.toLowerCase().includes(t.searchTerm.toLowerCase()));return{selectedCategory:e,filteredProducts:s}}),setSearchTerm:e=>o(t=>{const s=t.products.filter(a=>(t.selectedCategory==="All"||a.category===t.selectedCategory)&&a.name.toLowerCase().includes(e.toLowerCase()));return{searchTerm:e,filteredProducts:s}}),updateProductStock:(e,t)=>o(s=>({products:s.products.map(a=>a.id===e?{...a,stock:Math.max(0,a.stock-t)}:a)})),toggleProductFeatured:e=>o(t=>({products:t.products.map(s=>s.id===e?{...s,featured:!s.featured}:s)})),setCustomers:e=>o({customers:e}),addCustomer:e=>o(t=>({customers:[...t.customers,{...e,id:Math.max(...t.customers.map(s=>s.id),0)+1}]})),updateCustomer:(e,t)=>o(s=>({customers:s.customers.map(a=>a.id===e?{...a,...t}:a)})),deleteCustomer:e=>o(t=>({customers:t.customers.filter(s=>s.id!==e),orders:t.orders.filter(s=>s.customerId!==e)})),setCurrentCustomer:e=>o({currentCustomer:e}),updateCustomerStats:(e,t)=>o(s=>({customers:s.customers.map(a=>a.id===e?{...a,totalOrders:a.totalOrders+1,totalSpent:a.totalSpent+t,loyaltyPoints:a.loyaltyPoints+Math.floor(t),lastOrder:new Date().toISOString().split("T")[0]}:a)})),setOrders:e=>o(t=>({orders:e,activeOrders:e.filter(s=>s.status!=="delivered"&&s.status!=="cancelled"),completedOrders:e.filter(s=>s.status==="delivered"||s.status==="cancelled")})),addOrder:e=>o(t=>{const s={...e,id:Math.max(...t.orders.map(n=>n.id),0)+1},a=[...t.orders,s];return{orders:a,activeOrders:a.filter(n=>n.status!=="delivered"&&n.status!=="cancelled"),completedOrders:a.filter(n=>n.status==="delivered"||n.status==="cancelled")}}),updateOrder:(e,t)=>o(s=>{const a=s.orders.map(n=>n.id===e?{...n,...t}:n);return{orders:a,activeOrders:a.filter(n=>n.status!=="delivered"&&n.status!=="cancelled"),completedOrders:a.filter(n=>n.status==="delivered"||n.status==="cancelled")}}),deleteOrder:e=>o(t=>{const s=t.orders.filter(a=>a.id!==e);return{orders:s,activeOrders:s.filter(a=>a.status!=="delivered"&&a.status!=="cancelled"),completedOrders:s.filter(a=>a.status==="delivered"||a.status==="cancelled")}}),updateOrderStatus:(e,t)=>o(s=>{const a=s.orders.map(n=>n.orderId===e?{...n,status:t,deliveryDate:t==="delivered"?new Date().toISOString().split("T")[0]:n.deliveryDate}:n);return{orders:a,activeOrders:a.filter(n=>n.status!=="delivered"&&n.status!=="cancelled"),completedOrders:a.filter(n=>n.status==="delivered"||n.status==="cancelled")}}),getOrdersByCustomer:e=>r().orders.filter(t=>t.customerId===e),getOrdersByStatus:e=>r().orders.filter(t=>t.status===e),addToCart:(e,t=1)=>o(s=>{if(!e.inStock)return s;const a=s.items.find(c=>c.id===e.id);let n;a?n=s.items.map(c=>c.id===e.id?{...c,quantity:c.quantity+t}:c):n=[...s.items,{...e,quantity:t}];const d=n.reduce((c,l)=>c+l.price*l.quantity,0),i=n.reduce((c,l)=>c+l.quantity,0);return{items:n,total:d,itemCount:i}}),removeFromCart:e=>o(t=>{const s=t.items.filter(d=>d.id!==e),a=s.reduce((d,i)=>d+i.price*i.quantity,0),n=s.reduce((d,i)=>d+i.quantity,0);return{items:s,total:a,itemCount:n}}),updateQuantity:(e,t)=>o(s=>{if(t<=0)return r().removeFromCart(e);const a=s.items.map(i=>i.id===e?{...i,quantity:t}:i),n=a.reduce((i,c)=>i+c.price*c.quantity,0),d=a.reduce((i,c)=>i+c.quantity,0);return{items:a,total:n,itemCount:d}}),clearCart:()=>o({items:[],total:0,itemCount:0}),applyDiscount:e=>["FIRST20","SAVE10","LOYALTY15"].includes(e.toUpperCase()),setDrivers:e=>o({drivers:e}),updateDriver:(e,t)=>o(s=>({drivers:s.drivers.map(a=>a.id===e?{...a,...t}:a)})),setActiveDeliveries:e=>o({activeDeliveries:e}),updateDeliveryProgress:(e,t)=>o(s=>({activeDeliveries:s.activeDeliveries.map(a=>a.orderId===e?{...a,progress:Math.min(100,Math.max(0,t))}:a)})),assignDriver:(e,t)=>o(s=>({activeDeliveries:s.activeDeliveries.map(a=>a.orderId===e?{...a,driverId:t,status:"en-route"}:a),drivers:s.drivers.map(a=>a.id===t?{...a,currentLoad:a.currentLoad+1}:a)})),updateDeliveryStatus:(e,t)=>o(s=>({activeDeliveries:s.activeDeliveries.map(a=>a.orderId===e?{...a,status:t}:a)})),addDeliveryIssue:(e,t)=>o(s=>({activeDeliveries:s.activeDeliveries.map(a=>a.orderId===e?{...a,issues:[...a.issues,t]}:a)})),resolveDeliveryIssue:(e,t)=>o(s=>({activeDeliveries:s.activeDeliveries.map(a=>a.orderId===e?{...a,issues:a.issues.filter((n,d)=>d!==t)}:a)})),toggleDeliverySettings:e=>o(t=>({deliverySettings:{...t.deliverySettings,[e]:!t.deliverySettings[e]}})),addNotification:e=>o(t=>({notifications:[{...e,id:`notif-${Date.now()}-${Math.random().toString(36).substr(2,9)}`,timestamp:Date.now(),read:!1},...t.notifications],unreadCount:t.unreadCount+1})),markAsRead:e=>o(t=>({notifications:t.notifications.map(s=>s.id===e?{...s,read:!0}:s),unreadCount:Math.max(0,t.unreadCount-1)})),markAllAsRead:()=>o(e=>({notifications:e.notifications.map(t=>({...t,read:!0})),unreadCount:0})),deleteNotification:e=>o(t=>{const s=t.notifications.find(a=>a.id===e);return{notifications:t.notifications.filter(a=>a.id!==e),unreadCount:s&&!s.read?t.unreadCount-1:t.unreadCount}}),clearAllNotifications:()=>o({notifications:[],unreadCount:0}),updateSettings:e=>o(t=>({settings:{...t.settings,...e}})),login:async(e,t)=>{o({isLoading:!0,error:null});try{await new Promise(a=>setTimeout(a,1e3));const s={id:1,name:e==="admin@fadedskies.com"?"Admin User":"Demo User",email:e,role:e.includes("admin")?"admin":"customer",isAuthenticated:!0,token:`token-${Date.now()}`};return o({user:s,isAuthenticated:!0,isLoading:!1,currentCustomer:s.role==="customer"?{id:s.id,name:s.name,email:s.email,phone:"",address:"",dateJoined:new Date().toISOString().split("T")[0],totalOrders:0,totalSpent:0,status:"verified",lastOrder:null,preferences:[],loyaltyPoints:0}:null}),!0}catch{return o({isLoading:!1,error:"Login failed"}),!1}},logout:()=>o({user:null,isAuthenticated:!1,currentCustomer:null,items:[],total:0,itemCount:0}),register:async e=>{o({isLoading:!0,error:null});try{await new Promise(s=>setTimeout(s,1500));const t={id:Date.now(),name:e.name,email:e.email,role:"customer",isAuthenticated:!0,token:`token-${Date.now()}`};return o({user:t,isAuthenticated:!0,isLoading:!1}),!0}catch{return o({isLoading:!1,error:"Registration failed"}),!1}},updateProfile:e=>o(t=>({user:t.user?{...t.user,...e}:null})),setUser:e=>o({user:e,isAuthenticated:!!e}),setCurrentView:e=>o({currentView:e}),setLoading:e=>o({isLoading:e}),setError:e=>o({error:e}),toggleModal:e=>o(t=>({modals:{...t.modals,[e]:!t.modals[e]}})),toggleLiveTracking:()=>o(e=>({isLiveTrackingEnabled:!e.isLiveTrackingEnabled})),updateLastUpdated:()=>o({lastUpdated:Date.now()}),setConnectionStatus:e=>o({connectionStatus:e}),placeOrder:async(e,t)=>{var a,n,d;const s=r();if(s.items.length===0)throw new Error("Cart is empty");try{o({isLoading:!0});const i=`#FS${Date.now()}`,c={id:Math.max(...s.orders.map(l=>l.id),0)+1,orderId:i,customerId:((a=s.currentCustomer)==null?void 0:a.id)||1,customerName:((n=s.currentCustomer)==null?void 0:n.name)||"Guest",items:s.items.map(l=>({productId:l.id,name:l.name,quantity:l.quantity,price:l.price})),total:s.total,status:"processing",paymentStatus:"paid",orderDate:new Date().toISOString().split("T")[0],deliveryDate:null,address:t||((d=s.currentCustomer)==null?void 0:d.address)||"",notes:""};return r().addOrder(c),s.items.forEach(l=>{r().updateProductStock(l.id,l.quantity)}),s.currentCustomer&&r().updateCustomerStats(s.currentCustomer.id,s.total),r().clearCart(),r().addNotification({type:"order",title:"Order Placed Successfully",message:`Your order ${i} has been placed and is being prepared.`,priority:"medium",orderId:i}),o({isLoading:!1}),c}catch{return o({isLoading:!1,error:"Failed to place order"}),null}},syncData:async()=>{o({connectionStatus:"reconnecting"});try{await new Promise(e=>setTimeout(e,1e3)),r().updateLastUpdated(),o({connectionStatus:"connected"}),r().addNotification({type:"system",title:"Data Synchronized",message:"All data has been synced successfully.",priority:"low"})}catch{o({connectionStatus:"disconnected",error:"Sync failed"})}},resetStore:()=>o({products:[],customers:[],orders:[],items:[],drivers:[],activeDeliveries:[],notifications:[],user:null,isAuthenticated:!1,currentCustomer:null,currentView:"dashboard",total:0,itemCount:0,isLoading:!1,error:null}),getAnalytics:()=>{const e=r(),t=e.orders.reduce((i,c)=>i+c.total,0),s=e.orders.length>0?t/e.orders.length:0,a=e.products.map(i=>{const c=e.orders.reduce((l,p)=>{const g=p.items.find(h=>h.productId===i.id);return l+(g?g.quantity:0)},0);return{...i,sales:c}}).sort((i,c)=>c.sales-i.sales),n={total:e.customers.length,verified:e.customers.filter(i=>i.status==="verified").length,avgOrderValue:e.customers.length>0?e.customers.reduce((i,c)=>i+c.totalSpent,0)/e.customers.length:0,retention:e.customers.length>0?e.customers.filter(i=>i.totalOrders>1).length/e.customers.length:0},d=e.drivers.map(i=>({...i,efficiency:i.efficiency,ordersCompleted:i.ordersToday,rating:i.rating})).sort((i,c)=>c.efficiency-i.efficiency);return{totalRevenue:t,avgOrderValue:s,topProducts:a.slice(0,10),customerStats:n,driverPerformance:d}}}),{name:"cannabis-delivery-store",storage:$(()=>localStorage),partialize:o=>({user:o.user,isAuthenticated:o.isAuthenticated,currentCustomer:o.currentCustomer,items:o.items,total:o.total,itemCount:o.itemCount,deliverySettings:o.deliverySettings,settings:o.settings})})));var E={};const L=E.NEXT_PUBLIC_API_URL||"http://localhost:3001/api",T=E.NEXT_PUBLIC_WS_URL||"wss://ws.fadedskies.com";class B{constructor(r){S(this,"baseUrl");S(this,"token",null);this.baseUrl=r}setToken(r){this.token=r}async request(r,e={}){const t=`${this.baseUrl}${r}`,s={"Content-Type":"application/json",...e.headers};this.token&&(s.Authorization=`Bearer ${this.token}`);try{const a=await fetch(t,{...e,headers:s}),n=await a.json();return a.ok?{success:!0,data:n.data||n,message:n.message}:{success:!1,error:n.message||`HTTP ${a.status}`}}catch(a){return{success:!1,error:a instanceof Error?a.message:"Network error"}}}async get(r){return this.request(r,{method:"GET"})}async post(r,e){return this.request(r,{method:"POST",body:e?JSON.stringify(e):void 0})}async put(r,e){return this.request(r,{method:"PUT",body:e?JSON.stringify(e):void 0})}async delete(r){return this.request(r,{method:"DELETE"})}async patch(r,e){return this.request(r,{method:"PATCH",body:e?JSON.stringify(e):void 0})}}class J{constructor(){S(this,"client");this.client=new B(L)}initialize(r){r&&this.client.setToken(r)}async login(r,e){const t=await this.client.post("/auth/login",{email:r,password:e});return t.success&&t.data&&(this.client.setToken(t.data.token),u.getState().setUser({...t.data.user,isAuthenticated:!0,token:t.data.token})),t}async register(r){const e=await this.client.post("/auth/register",r);return e.success&&e.data&&(this.client.setToken(e.data.token),u.getState().setUser({...e.data.user,isAuthenticated:!0,token:e.data.token})),e}async logout(){await this.client.post("/auth/logout"),this.client.setToken(""),u.getState().logout()}async refreshToken(){const r=await this.client.post("/auth/refresh");return r.success&&r.data&&(this.client.setToken(r.data.token),u.getState().updateProfile({token:r.data.token})),r}async getProducts(){const r=await this.client.get("/products");return r.success&&r.data&&u.getState().setProducts(r.data),r}async createProduct(r){const e=await this.client.post("/products",r);return e.success&&e.data&&u.getState().addProduct(e.data),e}async updateProduct(r,e){const t=await this.client.put(`/products/${r}`,e);return t.success&&t.data&&u.getState().updateProduct(r,t.data),t}async deleteProduct(r){const e=await this.client.delete(`/products/${r}`);return e.success&&u.getState().deleteProduct(r),e}async getCustomers(){const r=await this.client.get("/customers");return r.success&&r.data&&u.getState().setCustomers(r.data),r}async createCustomer(r){const e=await this.client.post("/customers",r);return e.success&&e.data&&u.getState().addCustomer(e.data),e}async updateCustomer(r,e){const t=await this.client.put(`/customers/${r}`,e);return t.success&&t.data&&u.getState().updateCustomer(r,t.data),t}async getOrders(){const r=await this.client.get("/orders");return r.success&&r.data&&u.getState().setOrders(r.data),r}async createOrder(r){const e=await this.client.post("/orders",r);return e.success&&e.data&&u.getState().addOrder(e.data),e}async updateOrder(r,e){const t=await this.client.put(`/orders/${r}`,e);return t.success&&t.data&&u.getState().updateOrder(r,t.data),t}async updateOrderStatus(r,e){const t=await this.client.patch(`/orders/${r}/status`,{status:e});return t.success&&u.getState().updateOrderStatus(r,e),t}async getDrivers(){const r=await this.client.get("/drivers");return r.success&&r.data&&u.getState().setDrivers(r.data),r}async updateDriver(r,e){const t=await this.client.put(`/drivers/${r}`,e);return t.success&&t.data&&u.getState().updateDriver(r,t.data),t}async updateDriverLocation(r,e){return await this.client.patch(`/drivers/${r}/location`,e)}async getActiveDeliveries(){const r=await this.client.get("/deliveries/active");return r.success&&r.data&&u.getState().setActiveDeliveries(r.data),r}async assignDriver(r,e){const t=await this.client.post(`/deliveries/${r}/assign`,{driverId:e});return t.success&&u.getState().assignDriver(r,e),t}async updateDeliveryProgress(r,e){const t=await this.client.patch(`/deliveries/${r}/progress`,{progress:e});return t.success&&u.getState().updateDeliveryProgress(r,e),t}async getNotifications(){return await this.client.get("/notifications")}async markNotificationAsRead(r){const e=await this.client.patch(`/notifications/${r}/read`);return e.success&&u.getState().markAsRead(r),e}async uploadFile(r,e){const t=new FormData;t.append("file",r),t.append("type",e);try{const s=await fetch(`${L}/upload`,{method:"POST",headers:{Authorization:`Bearer ${this.client.token}`},body:t}),a=await s.json();return s.ok?{success:!0,data:a.url,message:"File uploaded successfully"}:{success:!1,error:a.message||"Upload failed"}}catch(s){return{success:!1,error:s instanceof Error?s.message:"Upload error"}}}async getAnalytics(r="7d"){return await this.client.get(`/analytics?range=${r}`)}async exportData(r){return await this.client.get(`/export/${r}`)}}class z{constructor(){S(this,"ws",null);S(this,"reconnectAttempts",0);S(this,"maxReconnectAttempts",5);S(this,"reconnectDelay",1e3);S(this,"heartbeatInterval",null)}connect(r){try{const e=r?`${T}?token=${r}`:T;this.ws=new WebSocket(e),this.ws.onopen=()=>{console.log("🔌 WebSocket connected"),this.reconnectAttempts=0,u.getState().setConnectionStatus("connected"),this.startHeartbeat(),r&&this.send({type:"auth",token:r})},this.ws.onmessage=t=>{try{const s=JSON.parse(t.data);this.handleMessage(s)}catch(s){console.error("Failed to parse WebSocket message:",s)}},this.ws.onclose=()=>{console.log("🔌 WebSocket disconnected"),this.stopHeartbeat(),u.getState().setConnectionStatus("disconnected"),this.attemptReconnect()},this.ws.onerror=t=>{console.error("🔌 WebSocket error:",t),u.getState().setConnectionStatus("disconnected")}}catch(e){console.error("Failed to connect WebSocket:",e),u.getState().setConnectionStatus("disconnected")}}disconnect(){this.stopHeartbeat(),this.ws&&(this.ws.close(),this.ws=null)}send(r){this.ws&&this.ws.readyState===WebSocket.OPEN&&this.ws.send(JSON.stringify(r))}handleMessage(r){const e=u.getState();switch(r.type){case"order_update":e.updateOrder(r.data.id,r.data),e.addNotification({type:"order",title:"Order Updated",message:`Order ${r.data.orderId} status changed to ${r.data.status}`,priority:"medium",orderId:r.data.orderId});break;case"delivery_update":e.updateDeliveryProgress(r.data.orderId,r.data.progress),r.data.status&&e.updateDeliveryStatus(r.data.orderId,r.data.status);break;case"driver_location":e.updateDriver(r.data.driverId,{currentLocation:r.data.location,lastUpdate:new Date().toLocaleTimeString()});break;case"notification":e.addNotification(r.data);break;case"product_update":e.updateProduct(r.data.id,r.data);break;case"inventory_alert":e.addNotification({type:"system",title:"Inventory Alert",message:`${r.data.productName} is running low (${r.data.stock} left)`,priority:"high"});break;case"driver_status":e.updateDriver(r.data.driverId,{status:r.data.status,online:r.data.online});break;case"heartbeat":this.send({type:"heartbeat_ack"});break;default:console.log("Unknown WebSocket message type:",r.type)}}attemptReconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;const r=u.getState();r.setConnectionStatus("reconnecting"),setTimeout(()=>{console.log(`🔌 Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);const e=r.user;this.connect(e==null?void 0:e.token)},this.reconnectDelay*this.reconnectAttempts)}else console.log("🔌 Max reconnection attempts reached"),u.getState().setConnectionStatus("disconnected")}startHeartbeat(){this.heartbeatInterval=setInterval(()=>{this.send({type:"heartbeat"})},3e4)}stopHeartbeat(){this.heartbeatInterval&&(clearInterval(this.heartbeatInterval),this.heartbeatInterval=null)}subscribeToOrder(r){this.send({type:"subscribe",channel:"order",orderId:r})}subscribeToDriver(r){this.send({type:"subscribe",channel:"driver",driverId:r})}subscribeToDeliveries(){this.send({type:"subscribe",channel:"deliveries"})}updateDriverLocation(r,e){this.send({type:"driver_location_update",data:{lat:r,lng:e}})}sendDriverMessage(r,e){this.send({type:"driver_message",driverId:r,message:e})}}const y=new J,k=new z,K=()=>y,Z=()=>k,ee=(o=!0)=>{const r=u();React.useEffect(()=>{if(!o)return;const e=setInterval(async()=>{try{await Promise.all([y.getProducts(),y.getOrders(),y.getActiveDeliveries(),y.getDrivers()]),r.updateLastUpdated()}catch(t){console.error("Auto-sync failed:",t),r.setError("Sync failed")}},6e4);return()=>clearInterval(e)},[o,r])},V=async()=>{var r,e;const o=u.getState();(r=o.user)!=null&&r.token&&y.initialize(o.user.token),k.connect((e=o.user)==null?void 0:e.token);try{await Promise.all([y.getProducts(),y.getCustomers(),y.getOrders(),y.getDrivers(),y.getActiveDeliveries()]),console.log("✅ Services initialized successfully")}catch(t){console.error("❌ Failed to initialize services:",t),o.setError("Failed to load initial data")}},Y=()=>{k.disconnect(),console.log("🧹 Services cleaned up")},G=(o,r)=>{var s,a,n,d;const e=u.getState();console.error(`API Error in ${r}:`,o);let t="An unexpected error occurred";((s=o.response)==null?void 0:s.status)===401?(t="Authentication required",e.logout()):((a=o.response)==null?void 0:a.status)===403?t="Access denied":((n=o.response)==null?void 0:n.status)===404?t="Resource not found":((d=o.response)==null?void 0:d.status)>=500?t="Server error - please try again later":o.message&&(t=o.message),e.setError(t),e.addNotification({type:"system",title:"Error",message:t,priority:"high"}),setTimeout(()=>{e.setError(null)},5e3)},te={apiService:y,wsService:k,initializeServices:V,cleanupServices:Y,handleApiError:G};export{J as CannabisDeliveryApi,z as WebSocketService,y as apiService,Y as cleanupServices,te as default,G as handleApiError,V as initializeServices,K as useApiService,ee as useAutoSync,Z as useWebSocketService,k as wsService};
