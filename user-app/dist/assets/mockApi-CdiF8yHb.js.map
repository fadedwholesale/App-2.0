{"version":3,"file":"mockApi-CdiF8yHb.js","sources":["../../src/mockApi.ts"],"sourcesContent":["// Mock API for testing user registration without backend dependencies\n\ninterface ApiResponse<T> {\n  success: boolean;\n  data?: T;\n  error?: string;\n  message?: string;\n}\n\ninterface RegisterRequest {\n  name: string;\n  email: string;\n  password: string;\n  phone: string;\n  dateOfBirth: string;\n}\n\ninterface LoginRequest {\n  email: string;\n  password: string;\n}\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  phone: string;\n  role: string;\n  isVerified: boolean;\n  isActive: boolean;\n  createdAt: string;\n}\n\ninterface AuthResponse {\n  user: User;\n  token: string;\n  message: string;\n}\n\n// Simple in-memory storage for development\nconst mockUsers: User[] = [];\nlet userIdCounter = 1;\n\nexport const mockApiService = {\n  async register(userData: RegisterRequest): Promise<ApiResponse<AuthResponse>> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Check if user already exists\n    const existingUser = mockUsers.find(user => user.email === userData.email);\n    if (existingUser) {\n      return {\n        success: false,\n        error: 'User with this email already exists'\n      };\n    }\n\n    // Create new user\n    const newUser: User = {\n      id: userIdCounter.toString(),\n      name: userData.name,\n      email: userData.email,\n      phone: userData.phone,\n      role: 'CUSTOMER',\n      isVerified: true, // Set as verified by default for immediate access\n      isActive: true,\n      createdAt: new Date().toISOString()\n    };\n\n    userIdCounter++;\n    mockUsers.push(newUser);\n\n    // Generate mock JWT token\n    const token = `mock-jwt-token-${newUser.id}-${Date.now()}`;\n\n    console.log('âœ… Mock user registered:', newUser);\n\n    return {\n      success: true,\n      data: {\n        user: newUser,\n        token,\n        message: 'User registered successfully'\n      },\n      message: 'User registered successfully'\n    };\n  },\n\n  async login(email: string, password: string): Promise<ApiResponse<AuthResponse>> {\n    // Simulate API delay\n    await new Promise(resolve => setTimeout(resolve, 500));\n\n    // Find user\n    const user = mockUsers.find(u => u.email === email);\n    if (!user) {\n      return {\n        success: false,\n        error: 'Invalid email or password'\n      };\n    }\n\n    // In a real API, we'd verify the password hash\n    // For mock, we'll just check if password is not empty\n    if (!password || password.trim() === '') {\n      return {\n        success: false,\n        error: 'Invalid email or password'\n      };\n    }\n\n    // Generate mock JWT token\n    const token = `mock-jwt-token-${user.id}-${Date.now()}`;\n\n    console.log('âœ… Mock user logged in:', user);\n\n    return {\n      success: true,\n      data: {\n        user,\n        token,\n        message: 'Login successful'\n      },\n      message: 'Login successful'\n    };\n  },\n\n  // Helper function to check if mock mode should be used\n  isMockMode(): boolean {\n    return process.env.NODE_ENV === 'development' && process.env.REACT_APP_USE_MOCK_API === 'true';\n  },\n\n  // Get all users (for testing)\n  getUsers(): User[] {\n    return mockUsers;\n  }\n};\n\n// Test function for complete order flow\nexport const runCompleteOrderFlowTest = () => {\n  console.log('ðŸ§ª Running complete order flow test...');\n  \n  // Simulate order flow steps\n  const steps = [\n    'Order placed',\n    'Order confirmed',\n    'Driver assigned',\n    'Driver picked up',\n    'Driver in transit',\n    'Order delivered'\n  ];\n  \n  steps.forEach((step, index) => {\n    setTimeout(() => {\n      console.log(`âœ… Step ${index + 1}: ${step}`);\n    }, index * 1000);\n  });\n  \n  console.log('ðŸ§ª Order flow test completed!');\n};\n"],"names":["mockUsers","userIdCounter","mockApiService","userData","resolve","user","newUser","token","email","password","u","runCompleteOrderFlowTest","step","index"],"mappings":"AAwCA,MAAMA,EAAoB,CAAA,EAC1B,IAAIC,EAAgB,EAEb,MAAMC,EAAiB,CAC5B,MAAM,SAASC,EAA+D,CAM5E,GAJA,MAAM,IAAI,QAAQC,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGhCJ,EAAU,QAAaK,EAAK,QAAUF,EAAS,KAAK,EAEvE,MAAO,CACL,QAAS,GACT,MAAO,qCAAA,EAKX,MAAMG,EAAgB,CACpB,GAAIL,EAAc,SAAA,EAClB,KAAME,EAAS,KACf,MAAOA,EAAS,MAChB,MAAOA,EAAS,MAChB,KAAM,WACN,WAAY,GACZ,SAAU,GACV,UAAW,IAAI,KAAA,EAAO,YAAA,CAAY,EAGpCF,IACAD,EAAU,KAAKM,CAAO,EAGtB,MAAMC,EAAQ,kBAAkBD,EAAQ,EAAE,IAAI,KAAK,KAAK,GAExD,eAAQ,IAAI,0BAA2BA,CAAO,EAEvC,CACL,QAAS,GACT,KAAM,CACJ,KAAMA,EACN,MAAAC,EACA,QAAS,8BAAA,EAEX,QAAS,8BAAA,CAEb,EAEA,MAAM,MAAMC,EAAeC,EAAsD,CAE/E,MAAM,IAAI,QAAQL,GAAW,WAAWA,EAAS,GAAG,CAAC,EAGrD,MAAMC,EAAOL,EAAU,KAAKU,GAAKA,EAAE,QAAUF,CAAK,EAClD,GAAI,CAACH,EACH,MAAO,CACL,QAAS,GACT,MAAO,2BAAA,EAMX,GAAI,CAACI,GAAYA,EAAS,KAAA,IAAW,GACnC,MAAO,CACL,QAAS,GACT,MAAO,2BAAA,EAKX,MAAMF,EAAQ,kBAAkBF,EAAK,EAAE,IAAI,KAAK,KAAK,GAErD,eAAQ,IAAI,yBAA0BA,CAAI,EAEnC,CACL,QAAS,GACT,KAAM,CACJ,KAAAA,EACA,MAAAE,EACA,QAAS,kBAAA,EAEX,QAAS,kBAAA,CAEb,EAGA,YAAsB,CACpB,MAAO,EACT,EAGA,UAAmB,CACjB,OAAOP,CACT,CACF,EAGaW,EAA2B,IAAM,CAC5C,QAAQ,IAAI,wCAAwC,EAGtC,CACZ,eACA,kBACA,kBACA,mBACA,oBACA,iBAAA,EAGI,QAAQ,CAACC,EAAMC,IAAU,CAC7B,WAAW,IAAM,CACf,QAAQ,IAAI,UAAUA,EAAQ,CAAC,KAAKD,CAAI,EAAE,CAC5C,EAAGC,EAAQ,GAAI,CACjB,CAAC,EAED,QAAQ,IAAI,+BAA+B,CAC7C"}