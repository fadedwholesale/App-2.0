const o=[];let n=1;const c={async register(s){if(await new Promise(r=>setTimeout(r,500)),o.find(r=>r.email===s.email))return{success:!1,error:"User with this email already exists"};const e={id:n.toString(),name:s.name,email:s.email,phone:s.phone,role:"CUSTOMER",isVerified:!0,isActive:!0,createdAt:new Date().toISOString()};n++,o.push(e);const i=`mock-jwt-token-${e.id}-${Date.now()}`;return console.log("âœ… Mock user registered:",e),{success:!0,data:{user:e,token:i,message:"User registered successfully"},message:"User registered successfully"}},async login(s,t){await new Promise(r=>setTimeout(r,500));const e=o.find(r=>r.email===s);if(!e)return{success:!1,error:"Invalid email or password"};if(!t||t.trim()==="")return{success:!1,error:"Invalid email or password"};const i=`mock-jwt-token-${e.id}-${Date.now()}`;return console.log("âœ… Mock user logged in:",e),{success:!0,data:{user:e,token:i,message:"Login successful"},message:"Login successful"}},isMockMode(){return!1},getUsers(){return o}},l=()=>{console.log("ðŸ§ª Running complete order flow test..."),["Order placed","Order confirmed","Driver assigned","Driver picked up","Driver in transit","Order delivered"].forEach((t,e)=>{setTimeout(()=>{console.log(`âœ… Step ${e+1}: ${t}`)},e*1e3)}),console.log("ðŸ§ª Order flow test completed!")};export{c as mockApiService,l as runCompleteOrderFlowTest};
//# sourceMappingURL=mockApi-CdiF8yHb.js.map
